
Travel Agency Website
A project by Group 1: Neha, Stephen, Jalil, and Taiwo

Table of Contents
Project Overview
Features
Technologies Used
Database Schema
Setup Instructions
Branches
Usage
Contributors

Project Overview
The Travel Agency Website is an ASP.NET Core-based web application that allows users to browse, purchase, and manage travel packages. It includes functionalities for user management, virtual wallets, travel preferences, and comprehensive bookings.

Features
User Authentication and Role Management (via ASP.NET Identity)
Travel Package Browsing and Booking
Virtual Wallet System with Transactions
Customer Travel Preferences Input
Detailed Price Breakdown for Purchases
Supplier and Product Management
Technologies Used
ASP.NET Core MVC
C#
SQL Server
Entity Framework Core
Bootstrap (for UI)
GitHub for Version Control
Database Schema
The database consists of 33 tables that manage users, bookings, purchases, and associated travel data:

_EFMigrationsHistory – Tracks Entity Framework migrations.
Affiliations – Manages partner or affiliation details.
Agencies – Stores travel agency details.
AgentPasswords – Handles agent authentication.
Agents – Contains information about agents.
AspNetRoleClaims – ASP.NET Identity role claims.
AspNetRoles – Manages application roles.
AspNetUserClaims – User claims for ASP.NET Identity.
AspNetUserLogins – External login providers.
AspNetUserRoles – Relationship between users and roles.
AspNetUsers – User information (customers, agents).
AspNetUserTokens – User tokens for authentication.
BookingDetails – Detailed information about bookings.
Bookings – Manages customer bookings.
Classes – Class types for travel or packages.
CreditCards – Stores customer payment details.
Customers – Stores registered customer data.
Customers_Rewards – Tracks reward points for customers.
Employees – Information about employees of the travel agency.
Fees – Stores additional fee details for packages.
Packages – List of travel packages.
Packages_Products_Suppliers – Relationships between packages, products, and suppliers.
Products – Travel-related products or add-ons.
Products_Suppliers – Manages product-supplier relationships.
Purchases – Tracks purchase transactions.
Regions – Travel regions or destinations.
Rewards – Reward details for customers.
SupplierContacts – Contact details for suppliers.
Suppliers – Stores supplier information.
TravelPreferences – Customers' travel preferences.
TripTypes – Different types of travel trips.
Wallets – Virtual wallet system for payments.
WalletTransactions – Tracks wallet-based transactions.
Setup Instructions
Prerequisites
Visual Studio 2022 or higher
.NET Core SDK 6.0 or higher
SQL Server (Express or Full version)
Steps to Set Up the Project
Clone the Repository

bash
Copy code
git clone https://github.com/nehauttwani/TravelTales-Asp.Net.git  
Switch to the Correct Branch

bash
Copy code
git checkout test-merge  
Restore NuGet Packages

Open the project in Visual Studio.
Right-click on the Solution and select Restore NuGet Packages.
Set Up the Database

Attach the provided SQL Server database file.
Update the connection string in appsettings.json to match your SQL Server configuration:
json
Copy code
"ConnectionStrings": {
    "DefaultConnection": "Server=YOUR_SERVER;Database=TravelExperts;Trusted_Connection=True;"
}
Run Database Migrations

Open the Package Manager Console and run:
bash
Copy code
Update-Database  
Run the Application

Build and run the application by pressing F5 or clicking Start.
Branches
test-merge: Latest version of the Travel Tales ASP.NET website.
Usage
Access the homepage at http://localhost:{port}.
Register or log in to explore travel packages.
Use the virtual wallet system to simulate purchases.
View and manage travel preferences.
Contributors
Neha Uttwani
Stephen Garo
Jalil Mohseni
Taiwo AdeJoro


Additional Notes
If you encounter any issues, please contact the contributors or raise an issue in the repository.
Below are the Alteration which have been done in original Database:







// Adding ImagePath column to packages table.

ALTER TABLE Packages
ADD ImagePath NVARCHAR(255);


UPDATE Packages
SET ImagePath = '/images/package-1.jpg'
WHERE PackageId = 1;

UPDATE Packages
SET ImagePath = '/images/package-2.jpg'
WHERE PackageId = 2;

UPDATE Packages
SET ImagePath = '/images/package-3.jpg'
WHERE PackageId = 3;

UPDATE Packages
SET ImagePath = '/images/package-4.jpg'
WHERE PackageId = 4;

Install PDFsharp package version 6.1.1


-- 1) Create the Wallets table
CREATE TABLE Wallets (
    WalletId INT IDENTITY(1,1) PRIMARY KEY, -- Primary key
    CustomerId INT NOT NULL, -- Foreign key to the Customers table
    Balance DECIMAL(18, 2) NOT NULL, -- Wallet balance
    CONSTRAINT FK_Wallets_Customers FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId) ON DELETE CASCADE
);




-- 2) Create the Purchases table
IF OBJECT_ID('dbo.Purchases', 'U') IS NOT NULL
DROP TABLE dbo.Purchases;
GO

CREATE TABLE Purchases (
    PurchaseId INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key
    CustomerId INT NOT NULL, -- Foreign Key for Customer
    PackageId INT NOT NULL, -- Foreign Key for Package
    ProductName NVARCHAR(255) NOT NULL, -- Product or Package Name
    Tax DECIMAL(18,2) NOT NULL, -- Tax amount
    BasePrice DECIMAL(18,2) NOT NULL, -- Base Price
    TotalPrice DECIMAL(18,2) NOT NULL, -- Total Price (BasePrice + Tax)
    Price DECIMAL(18,2) NOT NULL, -- Price Per Person
    PurchaseDate DATETIME NOT NULL, -- Purchase Date
    IsPaid BIT NOT NULL -- Payment Status (Paid or Not)
);
GO

-- Add foreign key relationships if necessary (optional)

ALTER TABLE Purchases
ADD CONSTRAINT FK_Purchases_Customers
FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId);
GO

ALTER TABLE Purchases
ADD CONSTRAINT FK_Purchases_Packages
FOREIGN KEY (PackageId) REFERENCES Packages(PackageId);
GO


-- 3) Create the WalletTransactions table----
CREATE TABLE WalletTransactions (
    TransactionId INT IDENTITY(1,1) PRIMARY KEY,
    CustomerId INT NOT NULL,
    TransactionDate DATETIME NOT NULL DEFAULT GETDATE(),
    Amount DECIMAL(18,2) NOT NULL,
    TransactionType NVARCHAR(50) NOT NULL, -- e.g., Deposit, Withdrawal
    Description NVARCHAR(255) NULL,
    CONSTRAINT FK_WalletTransactions_Customers FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)
);




CREATE TABLE [dbo].[TravelPreferences](
	[PreferenceId] [int] IDENTITY(1,1) NOT NULL,
	[CustomerId] [int] NOT NULL,
	[PreferredClimate] [nvarchar](50) NULL,
	[Activities] [nvarchar](max) NULL,
	[TravelCompanion] [nvarchar](50) NULL,
	[PreferredLocation] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[PreferenceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE Packages
ADD IsDeleted BIT NOT NULL DEFAULT 0;

